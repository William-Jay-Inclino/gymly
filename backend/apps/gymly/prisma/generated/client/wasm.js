
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AuditScalarFieldEnum = {
  id: 'id',
  gym_id: 'gym_id',
  username: 'username',
  table: 'table',
  action: 'action',
  reference_id: 'reference_id',
  metadata: 'metadata',
  ip_address: 'ip_address',
  device_info: 'device_info',
  created_at: 'created_at',
  notes: 'notes'
};

exports.Prisma.LimitScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value'
};

exports.Prisma.GymLimitScalarFieldEnum = {
  id: 'id',
  gym_id: 'gym_id',
  limit_id: 'limit_id',
  value: 'value'
};

exports.Prisma.GymStatsScalarFieldEnum = {
  id: 'id',
  gym_id: 'gym_id',
  total_revenue: 'total_revenue',
  total_members: 'total_members',
  updated_at: 'updated_at'
};

exports.Prisma.RevenueScalarFieldEnum = {
  id: 'id',
  gym_id: 'gym_id',
  year: 'year',
  month: 'month',
  amount: 'amount',
  created_at: 'created_at'
};

exports.Prisma.MembershipCountScalarFieldEnum = {
  id: 'id',
  gym_id: 'gym_id',
  year: 'year',
  month: 'month',
  count: 'count',
  created_at: 'created_at'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  firstname: 'firstname',
  lastname: 'lastname',
  password: 'password',
  role: 'role',
  contact_number: 'contact_number',
  is_active: 'is_active',
  created_at: 'created_at',
  created_by: 'created_by'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  contact_number: 'contact_number',
  created_at: 'created_at',
  created_by: 'created_by'
};

exports.Prisma.GymScalarFieldEnum = {
  id: 'id',
  owner_id: 'owner_id',
  name: 'name',
  location: 'location',
  created_at: 'created_at',
  created_by: 'created_by'
};

exports.Prisma.GymStaffScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  gym_id: 'gym_id',
  created_at: 'created_at',
  created_by: 'created_by'
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  member_id: 'member_id',
  gym_id: 'gym_id',
  start_date: 'start_date',
  end_date: 'end_date',
  sessions_left: 'sessions_left',
  is_active: 'is_active',
  is_reminded: 'is_reminded',
  plan_name: 'plan_name',
  plan_description: 'plan_description',
  amount_paid: 'amount_paid',
  created_at: 'created_at',
  created_by: 'created_by'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  gym_id: 'gym_id',
  name: 'name',
  description: 'description',
  price: 'price',
  num_of_days: 'num_of_days',
  num_of_sessions: 'num_of_sessions',
  created_at: 'created_at',
  created_by: 'created_by'
};

exports.Prisma.MemberTimeLogsScalarFieldEnum = {
  id: 'id',
  member_id: 'member_id',
  gym_id: 'gym_id',
  checked_in_at: 'checked_in_at',
  recorded_by: 'recorded_by'
};

exports.Prisma.MemberTimeLogsMembershipScalarFieldEnum = {
  id: 'id',
  member_time_log_id: 'member_time_log_id',
  membership_id: 'membership_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  GYM_OWNER: 'GYM_OWNER',
  GYM_STAFF: 'GYM_STAFF'
};

exports.Prisma.ModelName = {
  Audit: 'Audit',
  Limit: 'Limit',
  GymLimit: 'GymLimit',
  GymStats: 'GymStats',
  Revenue: 'Revenue',
  MembershipCount: 'MembershipCount',
  User: 'User',
  Member: 'Member',
  Gym: 'Gym',
  GymStaff: 'GymStaff',
  Membership: 'Membership',
  Plan: 'Plan',
  MemberTimeLogs: 'MemberTimeLogs',
  MemberTimeLogsMembership: 'MemberTimeLogsMembership'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
