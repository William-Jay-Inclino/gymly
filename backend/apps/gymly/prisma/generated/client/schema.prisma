generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  GYM_OWNER
  GYM_INSTRUCTOR
  GYM_STAFF
  MEMBER
}

enum PaymentMethod {
  CASH
  BANK
  GCASH
}

model User {
  id             String   @id @default(uuid())
  username       String?  @unique
  password_hash  String
  role           Role     @default(MEMBER)
  contact_number String?
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now()) @db.Timestamptz
  created_by     String

  gyms_owned Gym[] @relation("GymOwner")

  attendance_logs UserTimeLogs[]

  @@index([username])
  @@map("users")
}

model Member {
  id             String   @id @default(uuid())
  firstname      String
  middlename     String?
  lastname       String
  contact_number String?
  created_at     DateTime @default(now()) @db.Timestamptz
  created_by     String

  memberships     Membership[]
  attendance_logs MemberTimeLogs[]
  gym_instructors InstructorAssignment[] @relation("MemberAssignments")

  @@map("members")
}

model GymInstructor {
  id         String   @id @default(uuid())
  gym_id     String
  firstname  String
  middlename String?
  lastname   String
  created_at DateTime @default(now()) @db.Timestamptz
  created_by String

  trainees InstructorAssignment[] @relation("InstructorAssignments")
  gym      Gym                    @relation(fields: [gym_id], references: [id], onDelete: Cascade)

  @@index([gym_id])
  @@map("gym_instructors")
}

model Gym {
  id         String   @id @default(uuid())
  name       String
  location   String
  owner_id   String
  created_at DateTime @default(now()) @db.Timestamptz
  created_by String

  owner            User             @relation("GymOwner", fields: [owner_id], references: [id], onDelete: Restrict)
  memberships      Membership[]
  instructors      GymInstructor[]
  user_time_logs   UserTimeLogs[]
  member_time_logs MemberTimeLogs[]

  @@index([owner_id])
  @@map("gyms")
}

model Membership {
  id            String    @id @default(uuid())
  member_id     String
  gym_id        String
  plan_id       String
  start_date    DateTime  @default(now()) @db.Timestamptz
  end_date      DateTime? @default(now()) @db.Timestamptz
  sessions_left Int?
  is_active     Boolean   @default(true)
  is_paid       Boolean   @default(true)
  amount_paid   String
  created_at    DateTime  @default(now()) @db.Timestamptz
  created_by    String

  member   Member    @relation(fields: [member_id], references: [id], onDelete: Restrict)
  gym      Gym       @relation(fields: [gym_id], references: [id], onDelete: Restrict)
  plan     Plan      @relation(fields: [plan_id], references: [id], onDelete: Restrict)
  payments Payment[]

  @@index([member_id])
  @@index([gym_id])
  @@map("memberships")
}

model Plan {
  id              String   @id @default(uuid())
  name            String
  description     String?
  price           String
  num_of_days     Int?
  num_of_sessions Int?
  is_active       Boolean  @default(true)
  is_default      Boolean  @default(false)
  created_at      DateTime @default(now()) @db.Timestamptz
  created_by      String

  memberships Membership[]

  @@map("plans")
}

model Payment {
  id             String        @id @default(uuid())
  membership_id  String
  amount         Float
  payment_method PaymentMethod @default(CASH)
  paid_at        DateTime      @default(now()) @db.Timestamptz
  created_at     DateTime      @default(now()) @db.Timestamptz
  created_by     String

  membership Membership @relation(fields: [membership_id], references: [id], onDelete: Cascade)

  @@index([membership_id])
  @@map("payments")
}

model MemberTimeLogs {
  id            Int      @id @default(autoincrement())
  member_id     String
  gym_id        String
  checked_in_at DateTime @default(now()) @db.Timestamptz
  recorded_by   String

  member Member @relation(fields: [member_id], references: [id], onDelete: Cascade)
  gym    Gym    @relation(fields: [gym_id], references: [id], onDelete: Cascade)

  @@index([member_id])
  @@index([gym_id])
  @@map("member_time_logs")
}

model UserTimeLogs {
  id             Int       @id @default(autoincrement())
  user_id        String
  gym_id         String
  checked_in_at  DateTime  @default(now()) @db.Timestamptz
  checked_out_at DateTime? @db.Timestamptz
  recorded_by    String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  gym  Gym  @relation(fields: [gym_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([gym_id])
  @@map("user_time_logs")
}

model InstructorAssignment {
  id            Int      @id @default(autoincrement())
  instructor_id String
  member_id     String
  assigned_at   DateTime @default(now()) @db.Timestamptz
  assigned_by   String

  instructor GymInstructor @relation("InstructorAssignments", fields: [instructor_id], references: [id], onDelete: Cascade)
  member     Member        @relation("MemberAssignments", fields: [member_id], references: [id], onDelete: Cascade)

  @@index([instructor_id])
  @@index([member_id])
  @@map("instructor_assignments")
}
