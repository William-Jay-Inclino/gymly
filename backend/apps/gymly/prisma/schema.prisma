generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  GYM_OWNER
  GYM_STAFF
}

model GymStats {
  id            String   @id @default(uuid())
  gym_id        String   @unique
  total_revenue Float    @default(0)
  total_members Int      @default(0)
  updated_at    DateTime @updatedAt @db.Timestamptz

  gym Gym @relation(fields: [gym_id], references: [id], onDelete: Cascade)

  @@map("gym_stats")
}

model User {
  id             String   @id @default(uuid())
  username       String?  @unique
  password_hash  String
  role           Role     @default(GYM_OWNER)
  contact_number String?
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now()) @db.Timestamptz
  created_by     String

  gym_users      GymUser[]

  @@index([username])
  @@map("users")
}

model Member {
  id             String   @id @default(uuid())
  firstname      String
  lastname       String
  contact_number String?
  created_at     DateTime @default(now()) @db.Timestamptz
  created_by     String

  memberships     Membership[]
  attendance_logs MemberTimeLogs[]

  @@index([firstname, lastname])
  @@map("members")
}

model GymUser {
  id         String   @id @default(uuid())
  user_id       String
  gym_id   String

  gym      Gym       @relation(fields: [gym_id], references: [id], onDelete: Restrict)
  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([gym_id])
  @@map("gym_users")
}

model Gym {
  id         String   @id @default(uuid())
  name       String
  location   String
  created_at DateTime @default(now()) @db.Timestamptz
  created_by String

  memberships      Membership[]
  member_time_logs MemberTimeLogs[]

  gym_stats GymStats?
  gym_users GymUser[]

  @@map("gyms")
}

model Membership {
  id          String    @id @default(uuid())
  member_id   String
  gym_id      String
  start_date  DateTime  @default(now()) @db.Timestamptz
  end_date    DateTime? @default(now()) @db.Timestamptz
  sessions_left Int? 
  is_active   Boolean   @default(true)
  
  // plan details
  plan_name String
  plan_description String?
  amount_paid String

  created_at  DateTime  @default(now()) @db.Timestamptz
  created_by  String

  member   Member    @relation(fields: [member_id], references: [id], onDelete: Restrict)
  gym      Gym       @relation(fields: [gym_id], references: [id], onDelete: Restrict)

  @@index([member_id])
  @@index([gym_id])
  @@map("memberships")
}

model Plan {
  id              String   @id @default(uuid())
  gym_id      String
  name            String
  description     String?
  price           String
  num_of_days     Int?
  num_of_sessions Int?
  created_at      DateTime @default(now()) @db.Timestamptz
  created_by      String

  @@index([gym_id])
  @@map("plans")
}


model MemberTimeLogs {
  id            Int      @id @default(autoincrement())
  member_id     String
  gym_id        String
  checked_in_at DateTime @default(now()) @db.Timestamptz
  recorded_by   String

  member Member @relation(fields: [member_id], references: [id], onDelete: Cascade)
  gym    Gym    @relation(fields: [gym_id], references: [id], onDelete: Cascade)

  @@index([member_id])
  @@index([gym_id, checked_in_at])
  @@map("member_time_logs")
}

